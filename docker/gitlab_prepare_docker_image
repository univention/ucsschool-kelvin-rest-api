#!/bin/bash
set -ex

APP_ID="ucsschool-kelvin-rest-api"
APP_VERSION="$(cat ../kelvin-api/VERSION.txt)"
[ -z "$APP_VERSION" ] && exit 1
DOCKERFILE="$(basename "$(readlink -f Dockerfile)")"
BASE_IMG="$(egrep ^FROM "$DOCKERFILE" | cut -d ' ' -f 2-)"
APP_IMG_NO_VERSION="docker-test-upload.software-univention.de/${APP_ID}"
APP_IMG="${APP_IMG_NO_VERSION}:${APP_VERSION}"
APP_IMG_NO_TEST_NO_VERSION="docker-upload.software-univention.de/${APP_ID}"
APP_IMG_NO_TEST="${APP_IMG_NO_TEST_NO_VERSION}:${APP_VERSION}"
DOCKER_REGISTRY_SERVER="docker.knut.univention.de"
DATE="$(date -Iseconds)"
COMMIT="$CI_COMMIT_SHA"
OPENAPI_CLIENT_GENERATOR_VERSION="5.4.0"
OPENAPI_CLIENT_GENERATOR_JAR="openapi-generator-cli-$OPENAPI_CLIENT_GENERATOR_VERSION.jar"
OPENAPI_CLIENT_GENERATOR_JAR_URL="https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/$OPENAPI_CLIENT_GENERATOR_VERSION/$OPENAPI_CLIENT_GENERATOR_JAR"

if [ -n "$http_proxy" ]; then
    PROXY_ARGS="--build-arg http_proxy=$http_proxy --build-arg https_proxy=$http_proxy"
fi

echo "APP_ID=$APP_ID"
echo "APP_VERSION=$APP_VERSION"
echo "DATE=$DATE"
echo "COMMIT=$COMMIT"
echo "BASE_IMG=$BASE_IMG"
echo "APP_IMG=$APP_IMG"
echo "DOCKERFILE: $DOCKERFILE"
echo "PROXY_ARGS: $PROXY_ARGS"

echo "Updating/Downloading patched UCR..."
UCS_REPO_DIR="ucs"
UCS_BRANCH="dtroeder/ucr.pip.installable"
UCR_DIR="$UCS_REPO_DIR/base/univention-config-registry"
# try to use local git repo "~/git/ucs" when on developer machine
if [ -e ~/git/ucs/.git/config ] && grep -q '4.4-2' ~/git/ucs/.git/config; then
  REPO_URI="file://$HOME/git/ucs/"
else
  REPO_URI="https://git.knut.univention.de/univention/ucs.git"
  GIT_ARGS="-c http.sslVerify=false"
fi
if ! [ -d "$UCR_DIR" ]; then
  git $GIT_ARGS clone --depth=1 -b "$UCS_BRANCH" "$REPO_URI" "$UCS_REPO_DIR"
fi
(cd "$UCS_REPO_DIR" && git checkout "$UCS_BRANCH" && git $GIT_ARGS pull)

echo "Copying files to build directory..."
[ -d build ] || mkdir build
rsync -a --delete \
    "${UCR_DIR}" \
    ../.black \
    ../.isort.cfg \
    ../.flake8 \
    ../kelvin-api \
    ../univention-lib-slim \
    ../univention-directory-manager-modules-slim \
   ../ucs-school-lib \
   ../ucs-school-import \
   alpine_apk_list.* \
   Dockerfile \
   opa.initd \
   ucsschool-kelvin-rest-api.initd \
   logrotate_opa_info \
   logrotate_opa_template \
   logrotate_kelvin_info \
   logrotate_kelvin_template \
   ../fix_nt_acl_on_shares \
 build/

echo "Create empty import configs"
mkdir -p build/ucs-school-import/empty_configs
for FILE in global user_import user_import_legacy user_import_http-api; do
	if ! [ -e build/ucs-school-import/empty_configs/${FILE}.json ]; then
		echo '{}' > build/ucs-school-import/empty_configs/${FILE}.json
	fi
done

echo "Downloading OpenAPI Generator JAR file..."
# clean up older (cached) openapi-generator-cli*.jar files
find build/ -name 'openapi-generator-cli*.jar' ! -name "$OPENAPI_CLIENT_GENERATOR_JAR" -delete -print
# download new version
if ! ls -l "build/$OPENAPI_CLIENT_GENERATOR_JAR" 2>/dev/null; then
  wget -P build/ "${OPENAPI_CLIENT_GENERATOR_JAR_URL//\"}"
fi
ls -l build/openapi-generator-cli*

echo "Downloading Open Policy Agent..."
wget https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static -O build/opa
chmod +x build/opa

echo "Collecting all Python dependencies..."
# ... to minimize Docker image by installing and uninstalling in one step
find build/ -name 'requirements*.txt' -exec cat {} + | egrep -v 'univention|school' | sort | uniq > build/requirements_all.txt

echo "Building docker image..."
