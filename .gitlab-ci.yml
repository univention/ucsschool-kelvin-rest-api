include:
  - project: 'univention/documentation/sphinx-docker'
    file: 'pipeline/sphinx.yml'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_OPEN_MERGE_REQUESTS
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "webide"


stages:
  - lint
  - prepare
  - build
  - tests
  - merge
  - production

variables:
  DOCS_DIR: "doc/docs"
  DOC_TARGET_NAME: "ucsschool-kelvin-rest-api"
  DOC_TARGET_PATH: $DOC_TARGET_NAME

run_pre_commit:
  stage: lint
  image: docker-registry.knut.univention.de/knut/pre-commit-opa-python3.8
  variables:
    PRE_COMMIT_HOME: $CI_PROJECT_DIR/.cache/pre-commit
  cache:
    key: pre-commit
    paths:
      - $CI_PROJECT_DIR/.cache/pre-commit
  script:
    - pre-commit run -a

prepare:
  stage: prepare
  rules:
    - changes:
        - docker/*
        - kelvin-api/**/*
        - ucs-school-import/**/*
        - ucs-school-lib/**/*
        - univention-directory-manager-modules-slim/**/*
        - univention-lib-slim/**/*
  image:
    name: python:3.9-bullseye
  artifacts:
    paths:
    - docker/build/
    expire_in: 1 day
  # todo please check me
  cache:
    - key: "$CI_COMMIT_BRANCH"
      paths:
        - docker/build/
  script:
    - apt-get update
    - apt-get install git rsync
    - cd ${CI_PROJECT_DIR}/docker
    - ./gitlab_prepare_docker_image


html:
  extends: .sphinx-html-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

pdf:
  extends: .sphinx-pdf-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

linkcheck:
  extends: .sphinx-linkcheck-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

spelling:
  extends: .sphinx-spelling-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

docs-merge:
  extends: .sphinx-merge-template
  needs:
    - job: html
      artifacts: true
    - job: pdf
      artifacts: true
    - job: spelling
      artifacts: false
    - job: linkcheck
      artifacts: false
  rules:
    - changes:
      - $DOCS_DIR/**/*

docs-production:
  stage: production
  cache:
    key: docs-$CI_COMMIT_REF_SLUG
    paths:
      - univention-docs
  interruptible: false
  variables:
    GIT_STRATEGY: none
    GIT_AUTHOR_NAME: $GITLAB_USER_NAME
    GIT_AUTHOR_EMAIL: $GITLAB_USER_EMAIL
    GIT_COMMITTER_NAME: $GITLAB_USER_NAME
    GIT_COMMITTER_EMAIL: $GITLAB_USER_EMAIL
  needs:
    - job: docs-merge
      artifacts: true
  resource_group: prod
  image: docker-registry.knut.univention.de/knut/git-sync
  rules:
    - changes:
      - $DOCS_DIR/**/*
      if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
  script:
    - git config --global credential.$CI_SERVER_URL.username ucs-docs-deployment
    - git config --global credential.$CI_SERVER_URL.helper '!f() { [ "$1" = get ] && echo password="$DOCS_TOKEN"; }; f'
    - '[ -d univention-docs ] || git clone --branch master --depth 1 --single-branch $CI_SERVER_URL/univention/docs.univention.de.git univention-docs'
    - cd univention-docs
    - git clean --force -d
    - git fetch --no-tags origin
    - git reset --hard origin/master
    - rsync -av --delete "$CI_PROJECT_DIR"/out/"$DOC_TARGET_NAME"/ ./"$DOC_TARGET_NAME"/
    - git add -- .
    - git commit -m "Automatic doc deployment from $CI_PROJECT_PATH by GitLab commit $CI_COMMIT_SHA"
    - git push
  environment:
    name: production
    url: http://updates.knut.univention.de/download/docs/$DOC_TARGET_NAME

build:
  stage: build
  rules:
    - changes:
        - docker/*
        - kelvin-api/**/*
        - ucs-school-import/**/*
        - ucs-school-lib/**/*
        - univention-directory-manager-modules-slim/**/*
        - univention-lib-slim/**/*
  image:
    name: docker-registry.knut.univention.de/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    KANIKO_ARGS: --build-arg commit="$CI_COMMIT_SHA" --build-arg date="$CI_JOB_STARTED_AT" --cache=true --cache-repo "$CI_REGISTRY_IMAGE"
  script:
    # install KNUT CA
    - install -m 644 "$KNUT_CA" /kaniko/ssl/certs/knut.pem
    - cat /kaniko/ssl/certs/knut.pem >> /kaniko/ssl/certs/ca-certificates.crt
    # default tag is "test-SHA1HASH" ; in default branch the tag "release-SHA1HASH" is used
    - export DOCKER_TAG="branch-${CI_COMMIT_REF_SLUG}"
    - if [ -n "$CI_COMMIT_TAG" ] ; then export DOCKER_TAG="${CI_COMMIT_TAG}" ; export ARG_DESTINATION_LATEST="--destination ${CI_REGISTRY_IMAGE}:latest" ; fi
    # build docker container
    - mkdir -p "${DOCKER_CONFIG}"
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" >"${DOCKER_CONFIG}/config.json"
    - cd ${CI_PROJECT_DIR}/docker
    - >-
      /kaniko/executor
      --force
      --context "${CI_PROJECT_DIR}/docker/build/"
      --dockerfile "${CI_PROJECT_DIR}/docker/build/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${DOCKER_TAG}"
      ${ARG_DESTINATION_LATEST}

tests:
  stage: tests
  rules:
    - changes:
        - kelvin-api/**/*
        - ucs-school-lib/**/*
  image: "${CI_REGISTRY_IMAGE}:branch-${CI_COMMIT_REF_SLUG}"
  script:
    - cd ${CI_PROJECT_DIR}/kelvin-api && make test
    - cd ${CI_PROJECT_DIR}/ucs-school-lib/modules/ucsschool/lib && pytest -v tests