stages:
  - prepare
  - build
  - production

prepare:
  stage: prepare
  tags:
    - dm-s
  image:
    name: python:3.9-bullseye
  artifacts:
    paths:
    - docker/build/
    expire_in: 1 day
  script:
    - apt-get update
    - apt-get install git rsync
    - cd ${CI_PROJECT_DIR}/docker
    - ./gitlab_prepare_docker_image

.doc-base:
  variables:
    doc_base: doc/docs
  image: docker-registry.knut.univention.de/sphinx
  rules:
    - changes:
      - $doc_base/**/*

.sphinx-doc:
  stage: build
  extends: .doc-base
  artifacts:
    paths:
    - $CI_PROJECT_DIR/public
    expire_in: 1 week
  rules:
    - if: "$pipeline =~ /skip-doc/"
      when: never
    - if: "$pipeline =~ /force-doc/"

sphinx-html:
  extends: .sphinx-doc
  script:
    - make -C "$doc_base" html
    - mkdir -p "$CI_PROJECT_DIR"/public
    - rsync -av --delete --exclude "*webpack-macros.html" --exclude ".buildinfo" --exclude "*.py" --exclude "__pycache__" --exclude ".doctrees" "$doc_base"/_build/html/ "$CI_PROJECT_DIR"/public/

sphinx-pdf:
  extends: .sphinx-doc
  script:
    - make -C "$doc_base" latexpdf
    - mkdir -p "$CI_PROJECT_DIR"/public
    - cp "$doc_base"/_build/latex/UCSschoolKelvinRESTAPI.pdf "$CI_PROJECT_DIR"/public

sphinx-linkcheck:
  extends: .sphinx-doc
  script:
    - make -C "$doc_base" -e SPHINXOPTS="-W --keep-going" linkcheck
  artifacts:
    paths:
      - $doc_base/_build/linkcheck

sphinx-spelling:
  extends: .sphinx-doc
  script:
    - make -C "$doc_base" -e SPHINXOPTS="-W --keep-going" spelling
  artifacts:
    paths:
      - $doc_base/_build/spelling

docs-production:
  stage: production
  cache:
    key: docs-$CI_COMMIT_REF_SLUG
    paths:
      - univention-docs
  interruptible: false
  variables:
    GIT_STRATEGY: none
    GIT_AUTHOR_NAME: $GITLAB_USER_NAME
    GIT_AUTHOR_EMAIL: $GITLAB_USER_EMAIL
    GIT_COMMITTER_NAME: $GITLAB_USER_NAME
    GIT_COMMITTER_EMAIL: $GITLAB_USER_EMAIL
  resource_group: prod
  image: docker-registry.knut.univention.de/sphinx
  rules:
    - changes:
      - "doc/docs/**/*"
      if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
    - changes:
     - doc/docs/**/*
  script:
    - git config --global credential.$CI_SERVER_URL.username ucs-docs-deployment
    - git config --global credential.$CI_SERVER_URL.helper '!f() { [ "$1" = get ] && echo password="$DOCS_TOKEN"; }; f'
    - '[ -d univention-docs ] || git clone --branch master --depth 1 --single-branch $CI_SERVER_URL/univention/docs.univention.de.git univention-docs'
    - cd univention-docs
    - git clean --force -d
    - git fetch --no-tags origin
    - git reset --hard origin/master
    - rsync -av --delete "$CI_PROJECT_DIR"/public/ ./ucsschool-kelvin-rest-api/
    - git add -- .
    - git commit -m "Automatic doc deployment from $CI_PROJECT_PATH by GitLab commit $CI_COMMIT_SHA"
    - git push
  environment:
    name: production
    url: http://updates.knut.univention.de/download/docs/ucsscchool-kelvin-rest-api

build:
  stage: build
  tags:
    - dm-s
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # install KNUT CA
    - install -m 644 "$KNUT_CA" /kaniko/ssl/certs/knut.pem
    - cat /kaniko/ssl/certs/knut.pem >> /kaniko/ssl/certs/ca-certificates.crt
    # default tag is "test-SHA1HASH" ; in default branch the tag "release-SHA1HASH" is used
    - export DOCKER_TAG="branch-${CI_COMMIT_REF_SLUG}"
    - if [ -n "$CI_COMMIT_TAG" ] ; then export DOCKER_TAG="${CI_COMMIT_TAG}" ; export ARG_DESTINATION_LATEST="--destination ${CI_REGISTRY_IMAGE}:latest" ; fi
    # build docker container
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - cd ${CI_PROJECT_DIR}/docker
    - >-
      /kaniko/executor
      --force
      --context "${CI_PROJECT_DIR}/docker/build/"
      --dockerfile "${CI_PROJECT_DIR}/docker/build/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${DOCKER_TAG}"
      ${ARG_DESTINATION_LATEST}
